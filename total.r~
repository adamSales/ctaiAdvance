### only look at year 2
### and only at students who weren't in  year 1
library(splines)
library(R2jags)
memory.limit(50000)

#save(list=ls(),file=paste0('prev',Sys.time(),'.RData'))
rm(list=ls())

load('../../data/RANDstudyData/HSdata.RData')
load('../../data/sectionLevelUsageData/advanceData.RData')

dataPrep <- function(dat,advance,discard=TRUE){
 dat <- dat[!dat$field_id%in%dat$field_id[dat$year==1],]
 table(dat$year)

 dat <- droplevels(dat)
### look at promotion
### delete "CP" sections. Logic: these are missing data, since we don't get to see if student
### would have graduated. Student random effects calculated using observed sections. FIML?
 advance <- droplevels(subset(advance, status%in%c('graduated','promoted')))

 advance <- advance[advance$field_id%in%dat$field_id[dat$treatment==1],]

 ### just look at algebra I sections--- likely different advance patterns in other curricula
 ### make sure to keep algebra i units that are also part of other curricula
 algUnit <- unique(advance$unit[advance$curriculum=='algebra i'])
 advance <- subset(advance,unit%in%algUnit)

 advance$grad <- advance$status=='graduated'

 advance <- droplevels(advance)


 ### discard some pairs
 ## discard treatment schools with no usage data
 ## (do a robustness check with everything left in afterwards)
 percUse <- function(scl)
    length(intersect(unique(dat$field_id[dat$schoolid2==scl]),unique(advance$field_id)))/
        length(unique(dat$field_id[dat$schoolid2==scl]))

 obsUse <- vapply(unique(dat$schoolid2[dat$treatment==1]),percUse,1)

 obsUse <- unique(dat$schoolid2[dat$treatment==1])[obsUse>0.1]
 obsUse <- c(as.character(obsUse),as.character(unique(dat$schoolid2[dat$treatment==0])))

 if(discard)
  dat <- dat[dat$schoolid2%in%obsUse,]

 ## discard pairs with only a treatment or a control school
 pairTrtTab <- with(dat,table(pair,treatment))
 trtVar <- apply(pairTrtTab,1,prod)
 dat <- dat[trtVar[dat$pair]>0,]

 advance <- advance[advance$field_id%in%dat$field_id,]

 aaa <- aggregate(advance$grad,by=list(section=advance$section),FUN=mean)
 aaa$n <- as.vector(table(advance$section))

 if(discard) advance <- subset(advance,section%in%aaa$section[aaa$n>100 & aaa$x<1] & year==2)

 advance <- droplevels(advance)
 dat <- droplevels(dat)

 list(dat=dat,advance=advance)
}

makeJagsDat <- function(dat,advance){
 advance <- droplevels(advance)
 dat <- droplevels(dat)


 dat$sid <- 1:nrow(dat)

 nsecWorked <- nrow(advance)
 grad <- advance$grad
 sid <- dat$sid
 names(sid) <- dat$field_id
 studentM <- sid[as.character(advance$field_id)]
 nstud <- max(sid)
 stopifnot(nstud==length(unique(dat$field_id)))
 section <- as.numeric(as.factor(advance$section))
 nsec <- max(section)
 stopifnot(nsec==length(unique(advance$section)))


 X <- model.matrix(~poly(xirt,2)+race+sex+spec+state,data=dat)[,-1]
 X <- scale(X)
 ncovar <- ncol(X)

 teacher <- as.numeric(as.factor(dat$teachid2))
 ntch <- max(teacher)
 stopifnot(ntch==length(unique(dat$teachid2)))

 Z <- as.numeric(dat$treatment)

 Xm <- colMeans(X)

 school <- as.numeric(as.factor(dat$schoolid2))
 school <- vapply(1:ntch,function(i) school[teacher==i][1],1)
 nscl <- max(school)
 stopifnot(nscl==length(unique(dat$schoolid2)))

 Y <- dat$Y

 unit <- as.numeric(as.factor(advance$unit))
 unit <- vapply(1:nsec,function(i) unit[section==i][1],1)
 nunit <- max(unit)
 stopifnot(nunit==length(unique(advance$unit)))
 ### pair fixed effects
 pair <- as.numeric(dat$pair)
 npair <- max(pair)
 stopifnot(npair==length(unique(dat$pair)))

 xirt <- dat$xirt

 jagsDat <- list(nsecWorked,grad,studentM,section,X,teacher,Z,Xm,school,nstud,Y,ntch,nscl,nsec,unit,nunit,ncovar,pair,npair,xirt)
 names(jagsDat) <- c('nsecWorked','grad','studentM','section','X','teacher','Z','Xm','school','nstud','Y','ntch','nscl','nsec','unit','nunit','ncovar','pair','npair','xirt')

 jagsDat
}

totDat <- dataPrep(dat,advance)
datOrig <- dat
advanceOrig <- advance
dat <- totDat$dat
advance <- totDat$advance
rm(totDat);gc()

params <- c('studEff','secEff','alphaGrad','betaU','teacherEffU','Ynew','sig2Y','useEff','trtEff','betaY','teacherEffY','Ustd','a','b','sig2TchU','sig2TchY','sig2SclU','sig2SclY','sig2Sec','sig2Un','sig2U','pairEffect','sdSeff','avgSeff','a0','a1','a2','a3','b0','b1','b2','b3','nu.x','nu.u','nu.y','nu.tchu','nu.tchy','nu.sclu','nu.scly','nu.sec','lambda')

#############################################
## Real Models
#######################################
jagsDatReal <- makeJagsDat(dat,advance)

#realModels <- list()

print(Sys.time())
## lin <- jags.parallel(jagsDatReal,parameters=params,model.file='src/psmod.bug',n.chains=4,n.iter=100000,n.thin=50)
## print(Sys.time())

## save(lin,jagsDatReal,file=paste0('~/Google Drive/CTmodels/realModels/lin',Sys.Date(),'.RData'))
## rm(lin);gc()

#### robustness checks
print(Sys.time())
datBC <- dat
rawdat <- read.csv('../../data/RANDstudyData/H2_algebra_rcal_20121119_fieldid.csv')
datBC$Y <- vapply(datBC$field_id, function(id) rawdat$t2score[rawdat$field_id==id]+1,1)
jagsDatBC <- makeJagsDat(datBC,advance)
bc <- jags(jagsDatBC,parameters=params,model.file='src/psmodBC.bug',n.chains=4,n.iter=100000,n.thin=50)
print(Sys.time())

save(bc,jagsDatReal,file=paste0('~/Google Drive/CTmodels/realModels/bc',Sys.Date(),'.RData'))
rm(bc);gc()



jagsDatReal2 <- jagsDatReal
jagsDatReal2$X <- scale(model.matrix(~(poly(xirt,2)+race+sex+spec)^2+state,data=dat)[,-1])
jagsDatReal2$ncovar <- ncol(jagsDatReal2$X)
saturated <- jags.parallel(jagsDatReal2,parameters=params,model.file='src/psmod.bug',n.chains=4,n.iter=10000,n.thin=5)
save(saturated,jagsDatReal2,file=paste0('~/Google Drive/CTmodels/realModels/saturated',Sys.Date(),'.RData'))
rm(saturated);gc()

print(Sys.time())
covs$Y <- datOrig$Y
totCCA <- dataPrep(na.omit(covs[,c('field_id','year','treatment','race','sex','xirt','Y','state','teachid2','schoolid2','pair','spec')]),advanceOrig)
advanceCCA <- totCCA$advance
datCCA <- totCCA$dat
jagsDatCCA <- makeJagsDat(datCCA,advanceCCA)

cca <- jags.parallel(jagsDatCCA,parameters=params,model.file='src/psmod.bug',n.chains=4,n.iter=10000,n.thin=5)

save(cca,jagsDatCCA,file=paste0('~/Google Drive/CTmodels/realModels/cca',Sys.Date(),'.RData'))
rm(cca);gc()

### keep all schools, all software sections
fullData <- dataPrep(dat,advance,discard=FALSE)
jagsDatReal3 <- makeJagsDat(fullData$dat,fullData$advance)
full <- jags.parallel(jagsDatReal3,parameters=params,model.file='src/psmod.bug',n.chains=4,n.iter=10000,n.thin=5)
save(full,jagsDatReal3,file=paste0('~/Google Drive/CTmodels/realModels/full',Sys.Date(),'.RData'))
rm(full); gc()




################################################
## Fake Models
##############################################

### first delete control schools
dat <- subset(dat,treatment==1)

### now double the dataset
dat$schoolid2 <- as.character(dat$schoolid2)
dat$teachid2 <- as.character(dat$teachid2)
dat2 <- dat
dat2$schoolid2 <- paste0(dat2$schoolid2,'Fake')
dat2$teachid2 <- paste0(dat2$teachid2,'Fake')
dat2$field_id <- dat2$field_id*100+99
dat2$treatment <- 0
dat <- rbind(dat,dat2)

### now delete usage data for "control" group
# advance <- advance[advance$field_id%in%dat$field_id,]
advance <- advance[advance$field_id%in%dat$field_id[dat$treatment==1],]

#########################################################
### Compile JAGS data as before
#####################################################

advance <- droplevels(advance)
dat <- droplevels(dat)

dat$sid <- 1:nrow(dat)

nsecWorked <- nrow(advance)
grad <- advance$grad
sid <- dat$sid
names(sid) <- dat$field_id
studentM <- sid[as.character(advance$field_id)]
nstud <- max(sid)
stopifnot(nstud==length(unique(dat$field_id)))
section <- as.numeric(as.factor(advance$section))
nsec <- max(section)
stopifnot(nsec==length(unique(advance$section)))


X <- model.matrix(~poly(xirt,2)+race+sex+spec+state,data=dat)[,-1]
X <- scale(X)
ncovar <- ncol(X)

teacher <- as.numeric(as.factor(dat$teachid2))
ntch <- max(teacher)
stopifnot(ntch==length(unique(dat$teachid2)))

Z <- as.numeric(dat$treatment)

Xm <- colMeans(X)

school <- as.numeric(as.factor(dat$schoolid2))
school <- vapply(1:ntch,function(i) school[teacher==i][1],1)
nscl <- max(school)
stopifnot(nscl==length(unique(dat$schoolid2)))

Y <- dat$Y

unit <- as.numeric(as.factor(advance$unit))
unit <- vapply(1:nsec,function(i) unit[section==i][1],1)
nunit <- max(unit)
stopifnot(nunit==length(unique(advance$unit)))

## for calculating the variance of studEff
covX <- cov(X)

### forgot pair fixed effects
pair <- as.numeric(dat$pair)
npair <- max(pair)
stopifnot(npair==length(unique(dat$pair)))

#jagsDat <- list('nsecWorked','grad','studentM','section','X','teacher','Z','Xm','school','nstud','Y','ntch','nscl','nsec','unit','nunit','ncovar','covX','pair','npair')

#params <- c('studEff','secEff','alphaGrad','betaU','teacherEffU','Ynew','sig2Y','useEff','trtEff','betaY','teacherEffY','Ustd','a','b','sig2TchU','sig2TchY','sig2SclU','sig2SclY','sig2Sec','sig2Un','sig2U','pairEffect','sdSeff','avgSeff')


noEffModels <- list()

print(Sys.time())
noEffModels$lin <- jags.parallel(jagsDat,parameters=params,model.file='src/psmod.bug',n.chains=4,n.iter=10000,n.thin=4)


print(Sys.time())
save(list=ls(),file=paste0('~/Google Drive/CTmodels/noEffModels',Sys.Date(),'.RData'));rm(noEffModels);gc()




######## constant effect
########
Yorig <- Y



Y[Z==1] <- Y[Z==1]+rnorm(sum(Z),0.18,0.1)

constEffModels <- list()

print(Sys.time())
constEffModels$lin <- jags.parallel(jagsDat,parameters=params,model.file='src/psmod.bug',n.chains=4,n.iter=10000,n.thin=4)

save(list=ls(),file=paste0('~/Google Drive/CTmodels/constEffModels',Sys.Date(),'.RData'));rm(constEffModels);gc()




######### linear effect
#################

### Add linear treatment effect
                                        #load('logitUsage/mod1.RData')
library(jagstools)
load('~/Google Drive/CTmodels/fullUsage.RData')
usageMod <- mod
U <- jagsresults(usageMod,'studEff')[,1]
## same mean and var of treatment effect as in mod2
te <- 0.1/sd(U,na.rm=TRUE)*U
te <- te-mean(te)+0.18
Y <- Yorig
Y[Z==1] <- Yorig[Z==1]+te

linEffModels <- list()

print(Sys.time())
linEffModels$lin <- jags.parallel(jagsDat,parameters=params,model.file='src/psmod.bug',n.chains=4,n.iter=4000,n.thin=4)
save(list=ls(),file=paste0('~/Google Drive/CTmodels/linEffModels',Sys.Date(),'.RData'));rm(linEffModels);gc()


########### quadratic effects
Y <- Yorig
te <- -(U[dat$treatment==1]-mean(U[dat$treatment==1]))^2
te <- te/sd(te)*0.1
te <- te-mean(te)+0.18
Y[Z==1] <- Yorig[Z==1]+te

quadEffModels <- list()

print(Sys.time())
quadEffModels$lin <- jags.parallel(jagsDat,parameters=params,model.file='src/psmod.bug',n.chains=4,n.iter=4000,n.thin=4)
print(Sys.time())
qaudEffModels$int <- jags.parallel(jagsDat,parameters=params,model.file='src/psInt.bug',n.chains=4,n.iter=10000,n.thin=5)

save(list=ls(),file=paste0('~/Google Drive/CTmodels/quadEffModels',Sys.Date(),'.RData'));rm(quadEffModels);gc()

